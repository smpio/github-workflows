name: Build and push docker image

on:
  workflow_call:
    inputs:
      registry:
        default: ghcr.io
        required: false
        type: string
      image_name:
        default: ${{ github.repository }}
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ inputs.registry }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tags from Dockerfile
        id: meta
        shell: python
        run: |
          image='${{ inputs.registry }}/${{ inputs.image_name }}'

          def get_base_image(fp):
            for line in fp:
              line = line.split()
              if line and line[0] == 'FROM':
                return line[1]

          def get_semver_tags(base_tag):
            tags = base_tag.split('.')
            while tags:
              yield '.'.join(tags)
              tags.pop()

          def escape(s):
            return s\
              .replace('%', '%25')\
              .replace('\r', '%0D')\
              .replace('\n', '%0A')

          with open('Dockerfile', 'r') as fp:
            base_image = get_base_image(fp)
            if not base_image:
              raise Exception('No base image in Dockerfile!')

          img, tag = base_image.split(':', maxsplit=1)
          tags = list(get_semver_tags(tag))

          full_tags = (f'{image}:{t}' for t in tags)
          full_tags_str = '\n'.join(full_tags) + f'\n{image}:latest'

          print(f'::set-output name=tags::{escape(full_tags_str)}')

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
